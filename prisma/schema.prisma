generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String           @db.VarChar(100)
  email           String           @unique @db.VarChar(255)
  role            UserRole         @default(customer)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  isActive        Boolean          @default(true)
  deletedAt       DateTime?        @map("deleted_at")
  addresses       Address[]
  analyticsEvents AnalyticsEvent[]
  orders          Order[]
  reviews         Review[]
  wishlist        Wishlist?

  @@index([email])
  @@index([deletedAt])
  @@map("users")
}

model Hero {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  image       String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  buttonLink  String?
  buttonText  String?
  color       String?
  description String?

  @@map("hero")
}

model Product {
  id            String           @id @default(cuid())
  name          String           @db.VarChar(255)
  slug          String           @unique @db.VarChar(255)
  description   String
  price         Decimal          @db.Decimal(10, 2)
  comparePrice  Decimal?         @map("compare_price") @db.Decimal(10, 2)
  sku           String?          @unique @db.VarChar(50)
  stock         Int              @default(0)
  categoryId    String           @map("category_id")
  images        String[]
  isDeleted     Boolean          @default(false) @map("is_deleted")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  deletedAt     DateTime?        @map("deleted_at")
  orderItems    OrderItem[]
  variants      ProductVariant[]
  category      Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([slug])
  @@index([isDeleted])
  @@index([deletedAt])
  @@map("products")
}

model ProductVariant {
  id         String    @id @default(cuid())
  productId  String    @map("product_id")
  name       String    @db.VarChar(100)
  sku        String?   @db.VarChar(50)
  price      Decimal   @db.Decimal(10, 2)
  stock      Int       @default(0)
  attributes Json
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([deletedAt])
  @@map("product_variants")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique @db.VarChar(100)
  slug        String     @unique @db.VarChar(100)
  image       String?
  description String?
  parentId    String?    @map("parent_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  products    Product[]

  @@index([slug])
  @@index([deletedAt])
  @@map("categories")
}

model Order {
  id              String           @id @default(cuid())
  userId          String           @map("user_id")
  status          OrderStatus      @default(pending)
  totalAmount     Decimal          @map("total_amount") @db.Decimal(10, 2)
  subtotal        Decimal          @db.Decimal(10, 2)
  tax             Decimal          @db.Decimal(10, 2)
  shipping        Decimal          @db.Decimal(10, 2)
  discount        Decimal          @default(0) @db.Decimal(10, 2)
  paymentStatus   PaymentStatus    @default(unpaid) @map("payment_status")
  couponId        String?          @map("coupon_id")
  trackingNumber  String?          @map("tracking_number") @db.VarChar(100)
  notes           String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  orderItems      OrderItem[]
  coupon          Coupon?          @relation(fields: [couponId], references: [id])
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment         Payment?
  refund          Refund?
  shippingAddress ShippingAddress?

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([deletedAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  variantId String? @map("variant_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique @map("order_id")
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(unpaid) @map("payment_status")
  transactionId String?       @map("transaction_id") @db.VarChar(255)
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD") @db.VarChar(3)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([paymentStatus])
  @@map("payments")
}

model Review {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  productId String    @map("product_id")
  rating    Int       @db.SmallInt
  title     String?   @db.VarChar(255)
  comment   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([deletedAt])
  @@map("reviews")
}

model Address {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  fullName  String    @map("full_name") @db.VarChar(100)
  street    String    @db.VarChar(255)
  city      String    @db.VarChar(100)
  state     String    @db.VarChar(100)
  zipCode   String    @map("zip_code") @db.VarChar(20)
  country   String    @db.VarChar(100)
  phone     String    @db.VarChar(20)
  isDefault Boolean   @default(false) @map("is_default")
  deletedAt DateTime? @map("deleted_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deletedAt])
  @@map("addresses")
}

model ShippingAddress {
  id       String @id @default(cuid())
  orderId  String @unique @map("order_id")
  fullName String @map("full_name") @db.VarChar(100)
  street   String @db.VarChar(255)
  city     String @db.VarChar(100)
  state    String @db.VarChar(100)
  zipCode  String @map("zip_code") @db.VarChar(20)
  country  String @db.VarChar(100)
  phone    String @db.VarChar(20)
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_addresses")
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique @map("user_id")
  deletedAt DateTime?      @map("deleted_at")
  items     WishlistItem[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@map("wishlists")
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String   @map("wishlist_id")
  productId  String   @map("product_id")
  addedAt    DateTime @default(now()) @map("added_at")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@index([wishlistId])
  @@index([productId])
  @@map("wishlist_items")
}

model Settings {
  value       Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?
  key         String   @id @db.VarChar(50)

  @@map("settings")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique @db.VarChar(20)
  type        CouponType
  value       Decimal    @db.Decimal(10, 2)
  minPurchase Decimal?   @map("min_purchase") @db.Decimal(10, 2)
  maxDiscount Decimal?   @map("max_discount") @db.Decimal(10, 2)
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  usageLimit  Int?       @map("usage_limit")
  usageCount  Int        @default(0) @map("usage_count")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  orders      Order[]

  @@index([code])
  @@index([isActive])
  @@index([deletedAt])
  @@map("coupons")
}

model Audit {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Refund {
  id        String       @id @default(cuid())
  orderId   String       @unique @map("order_id")
  amount    Decimal      @db.Decimal(10, 2)
  reason    String
  status    RefundStatus @default(pending)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("refunds")
}

model AnalyticsEvent {
  id        String    @id @default(cuid())
  eventType EventType @map("event_type")
  userId    String?   @map("user_id")
  productId String?   @map("product_id")
  orderId   String?   @map("order_id")
  metadata  Json?
  createdAt DateTime  @default(now()) @map("created_at")
  user      User?     @relation(fields: [userId], references: [id])

  @@index([eventType])
  @@index([userId])
  @@index([productId])
  @@index([orderId])
  @@index([createdAt])
  @@map("analytics_events")
}

enum UserRole {
  admin
  staff
  customer

  @@map("user_role")
}

enum OrderStatus {
  pending
  shipped
  delivered
  canceled
  processing

  @@map("order_status")
}

enum PaymentStatus {
  unpaid
  paid
  refunded
  partially_refunded
  failed

  @@map("payment_status")
}

enum PaymentMethod {
  stripe
  paypal
  bank_transfer

  @@map("payment_method")
}

enum CouponType {
  percentage
  fixed_amount

  @@map("coupon_type")
}

enum RefundStatus {
  pending
  approved
  completed
  rejected

  @@map("refund_status")
}

enum EventType {
  PAGE_VIEW
  PRODUCT_VIEW
  ADD_TO_CART
  REMOVE_FROM_CART
  CHECKOUT_START
  CHECKOUT_COMPLETE
  SIGN_IN
  SIGN_UP
  SEARCH
  FILTER

  @@map("event_type")
}
